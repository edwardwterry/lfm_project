// Generated by gencpp from file lfm/Block.msg
// DO NOT EDIT!


#ifndef LFM_MESSAGE_BLOCK_H
#define LFM_MESSAGE_BLOCK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lfm
{
template <class ContainerAllocator>
struct Block_
{
  typedef Block_<ContainerAllocator> Type;

  Block_()
    : block_id()
    , block_x()
    , block_y()  {
    }
  Block_(const ContainerAllocator& _alloc)
    : block_id(_alloc)
    , block_x(_alloc)
    , block_y(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _block_id_type;
  _block_id_type block_id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _block_x_type;
  _block_x_type block_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _block_y_type;
  _block_y_type block_y;





  typedef boost::shared_ptr< ::lfm::Block_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lfm::Block_<ContainerAllocator> const> ConstPtr;

}; // struct Block_

typedef ::lfm::Block_<std::allocator<void> > Block;

typedef boost::shared_ptr< ::lfm::Block > BlockPtr;
typedef boost::shared_ptr< ::lfm::Block const> BlockConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lfm::Block_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lfm::Block_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lfm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'lfm': ['/home/et/Documents/lfm_ws/src/lfm/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lfm::Block_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lfm::Block_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lfm::Block_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lfm::Block_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lfm::Block_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lfm::Block_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lfm::Block_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9643fae418351e15e5ed3fde4997c5fa";
  }

  static const char* value(const ::lfm::Block_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9643fae418351e15ULL;
  static const uint64_t static_value2 = 0xe5ed3fde4997c5faULL;
};

template<class ContainerAllocator>
struct DataType< ::lfm::Block_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lfm/Block";
  }

  static const char* value(const ::lfm::Block_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lfm::Block_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] block_id\n\
float32[] block_x\n\
float32[] block_y\n\
";
  }

  static const char* value(const ::lfm::Block_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lfm::Block_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.block_id);
      stream.next(m.block_x);
      stream.next(m.block_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Block_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lfm::Block_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lfm::Block_<ContainerAllocator>& v)
  {
    s << indent << "block_id[]" << std::endl;
    for (size_t i = 0; i < v.block_id.size(); ++i)
    {
      s << indent << "  block_id[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.block_id[i]);
    }
    s << indent << "block_x[]" << std::endl;
    for (size_t i = 0; i < v.block_x.size(); ++i)
    {
      s << indent << "  block_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.block_x[i]);
    }
    s << indent << "block_y[]" << std::endl;
    for (size_t i = 0; i < v.block_y.size(); ++i)
    {
      s << indent << "  block_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.block_y[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LFM_MESSAGE_BLOCK_H
